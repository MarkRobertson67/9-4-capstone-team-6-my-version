
import React, { useState } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';
import loadingAnimation from '../../../assets/S-Loop_transnparent.gif'; // Import the loading animation
import Map from '../../Map/Map';

// Sanitizer function to prevent SQL injection
function sanitizeInput(input) {
  // Escape single quotes by replacing them with double single quotes
  return input.replace(/'/g, "''");
}

const config = {
  openaiApiKey: process.env.REACT_APP_OPENAI_API_KEY,
  apiUrl: process.env.REACT_APP_API_URL,
  googleApiKey: process.env.REACT_APP_GOOGLE_API_KEY,
  unsplashApiKey: process.env.REACT_APP_UNSPLASH_API_ACCESS_KEY,
  // unsplashApiSecretKey: process.env.REACT_APP_UNSPLASH_API_SECRET_KEY,
};

// Define the fetchCityPhoto function
const fetchCityPhoto = async (cityName, setCityPhoto) => {
  try {
    const response = await axios.get(
      `https://api.unsplash.com/search/photos?query=${encodeURIComponent(cityName)}&client_id=${config.unsplashApiKey}&count=1&order_by=relevant&per_page=1`
    );

    // Extract the photo URL from the response
    const photoUrl = response.data.results[0]?.urls?.regular || '';

    setCityPhoto(photoUrl); // Set the city photo URL in state

    return photoUrl;
  } catch (error) {
    console.error('Error fetching city photo:', error);
    return ''; // Return an empty string in case of an error
  }
};

export default function CreateNewTour() {
  const [tour, setTour] = useState({
    country: '',
    region: '',
    state: '',
    city: '',
    duration: 'Full-day',
    difficulty: 'Medium',
    theme: 'Historic', // Updated: theme instead of tourType
  });

  const [tourContent, setTourContent] = useState('');
  const [isLoading, setIsLoading] = useState(false); // Added isLoading state
  const [cityPhoto, setCityPhoto] = useState('');


  const parsePointsOfInterest = (generatedTour) => {
    const bulletPattern = /^\s*\d+\.\s(.+)$/gm;
    const matches = [];
    let match;
    while ((match = bulletPattern.exec(generatedTour)) !== null) {
      matches.push(match[1]);
    }
    return matches;
  };

  const generateWalkingTour = async () => {
    try {
      setIsLoading(true); // Set loading to true

      // const prompt = `Walking Tour in ${tour.city}, ${tour.region}, ${tour.state}, ${tour.country}\nTour Duration: ${tour.duration}\nDifficulty Level: ${tour.difficulty}\nTour Theme: ${tour.theme},`; // Updated: theme instead of tourType

      // Sanitize the input values
      const sanitizedCity = sanitizeInput(tour.city);
      const sanitizedRegion = sanitizeInput(tour.region);
      const sanitizedState = sanitizeInput(tour.state);
      const sanitizedCountry = sanitizeInput(tour.country);
      const sanitizedDuration = sanitizeInput(tour.duration);
      const sanitizedDifficulty = sanitizeInput(tour.difficulty);
      const sanitizedTheme = sanitizeInput(tour.theme);

      const prompt = `Walking Tour in ${sanitizedCity}, ${sanitizedRegion}, ${sanitizedState}, ${sanitizedCountry}\nTour Duration: ${sanitizedDuration}\nDifficulty Level: ${sanitizedDifficulty}\nTour Theme: ${sanitizedTheme},`;


      const requestBody = {
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: 'Create a self guided walking tour where a person can start somewhere and follow a route from start point to each point of interest and returning to the start point when the tour is over.  I only want the tour route and what points of interest are on that route. I will ask later for an in depth tour or each point of interest.',
          },
          {
            role: 'user',
            content: prompt,
          },
          {
            role: 'user',
            content: `Use this as a format example for the response I want to get. I do not want any additional information other than what is in this example, also notice how the start point and end point are the same: 
          
          Start Point: Plaça de Catalunya
          
          Route:
          1. Plaça de Catalunya
          2. La Rambla
          3. Palau Güell
          4. Plaça Reial
          5. Barcelona Cathedral
          6. Santa Maria del Mar
          7. Picasso Museum
          8. Parc de la Ciutadella
          9. Arc de Triomf
          10. Sagrada Família
          11. Casa Batlló
          12. Casa Milà (La Pedrera)
          13. Passeig de Gràcia
          14. Plaça de Catalunya (return to start point)`
          }

        ],
        // max_tokens: 150, // Specifies the maximum length of the response generated by the model in terms of tokens. You can use this to limit the length of the response.
        // stop: '\n', // You can provide a list of strings in this parameter, and the model will stop generating text when it encounters any of these strings. For example, you can use it to stop the generation when you see something like "End of Tour."
        // temperature: 0.6, // This parameter controls the randomness of the model's responses. Lower values (e.g., 0.2) make the responses more deterministic and focused, while higher values (e.g., 0.8) make them more random.
        // top_p: 0.7, // This parameter controls the diversity of the response. Higher values (e.g., 0.8) make the model generate more diverse text.
        // frequency_penalty: 0.3, // You can use this to adjust the penalty for frequently used words. Higher values (e.g., 0.5) make the model use less common words.
        // presence_penalty: 0.3, // This parameter adjusts the penalty for the presence of certain words. Higher values (e.g., 0.5) make the model avoid using specific words.
        // temperature_decay: 0.9, // This is an experimental parameter. It allows you to set a decay rate for the temperature during the conversation. For example, you can set it to 0.9 to gradually decrease the temperature as the conversation progresses.
        // best_of: 5, // You can set this parameter to an integer value to get multiple responses and then select the best one. For example, if you set best_of to 5, you will get 5 responses, and you can choose the one that best fits your needs.
        // timeout: 30, // Response timeout in seconds


      };

      const response = await axios.post('https://api.openai.com/v1/chat/completions', requestBody, {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${config.openaiApiKey}`,
        },
      });

      const generatedTour = response.data.choices[0]?.message.content;
      setTourContent(generatedTour);

      const pointsOfInterest = parsePointsOfInterest(generatedTour);

      // Sanitize each point of interest
      const sanitizedPointsOfInterest = pointsOfInterest.map(sanitizeInput);


      console.log('Points of Interest: ', sanitizedPointsOfInterest);

      setIsLoading(false); // Set loading to false when loading is complete

      return generatedTour

    } catch (error) {
      console.error('Error:', error);
      setTourContent('Error generating the walking tour. Please try again.');
      setIsLoading(false); // Set loading to false in case of an error
    }
  };

  const handleDropdownChange = (event) => {
    const { id, value } = event.target;
    setTour({ ...tour, [id]: value });
  };

  const handleTextChange = (event) => {
    const { name, value } = event.target;
    setTour({ ...tour, [name]: value });
  };

  const generateTourName = () => {
    const { city, country, theme, duration, difficulty } = tour;
    const name = `${city}, ${country} ${theme} tour - lasting ${duration} with ${difficulty} difficulty.`;
    console.log('Generated Tour Name:', name);
    return name;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    let generatedWalkingTour = await generateWalkingTour();

    // Parse and sanitize points of interest
    const pointsOfInterest = parsePointsOfInterest(generatedWalkingTour);
    const sanitizedPointsOfInterest = pointsOfInterest.map(sanitizeInput);




    // Fetch the city photo
    const cityPhoto = await fetchCityPhoto(tour.city, setCityPhoto);

    const newTour = {
      // country: tour.country,
      // region: tour.region,
      // state: tour.state,
      // city: tour.city,
      // duration: tour.duration,
      // difficulty: tour.difficulty,
      // theme: tour.theme,
      country: sanitizeInput(tour.country),
      region: sanitizeInput(tour.region),
      state: sanitizeInput(tour.state),
      city: sanitizeInput(tour.city),
      duration: sanitizeInput(tour.duration),
      difficulty: sanitizeInput(tour.difficulty),
      theme: sanitizeInput(tour.theme),
      tour_name: generateTourName(), // Generate the tour name
      image_url: cityPhoto, // Include the city photo URL
      ordered_points_of_interest: sanitizedPointsOfInterest, // Use pointsOfInterest from tourContent
    };

    try {
      const response = await axios.post(`${config.apiUrl}/tours`, newTour, {
        headers: {
          'Content-Type': 'application/json',
        },
      });
      console.log('Tour added successfully:', response.data);
    } catch (error) {
      console.error('Error adding tour:', error);
    }
  };



  return (
    <div className="container flex-col items-center justify-center mt-5" style={{ paddingTop: '160px' }}>
      <h1 className="text-4xl text-center mb-4 underline">Walking Tour Generator</h1>
      <div className="row mb-3">
        <div className="col-md-4">
          <br />
          <input
            type="text"
            className="form-control text-center rounded-lg"
            style={{ width: '25%', height: '45px' }}
            placeholder="City"
            name="city"
            value={tour.city}
            onChange={handleTextChange}
          />
        </div>
<br/ >
        <div className="col-md-4">
          <input
            type="text"
            className="form-control text-center rounded-lg"
            style={{ width: '25%', height: '45px' }}
            placeholder="Borough/Region"
            name="region"
            value={tour.region}
            onChange={handleTextChange}
          />
        </div>
<br />
        <div className="col-md-4">
          <input
            type="text"
            className="form-control text-center rounded-lg"
            style={{ width: '25%', height: '45px' }}
            placeholder="State/County/Province"
            name="state"
            value={tour.state}
            onChange={handleTextChange}
          />
        </div>
        <br />
        <div className="col-md-4">
          <input
            type="text"
            className="form-control text-center rounded-lg"
            style={{ width: '25%', height: '45px' }}
            placeholder="Country"
            name="country"
            value={tour.country}
            onChange={handleTextChange}
          />
        </div>
      </div>
      <div className="row mb-3">
        <div className="col-md-4">
          <select
            className="form-control"
            value={tour.duration}
            onChange={handleDropdownChange}
            id="duration"
          >
            <option value="Full-day">Full-day</option>
            <option value="Half-day">Half-day</option>
            <option value="2 hours">2 hours</option>
          </select>
        </div>
        <div className="col-md-4">
          <select
            className="form-control"
            value={tour.difficulty}
            onChange={handleDropdownChange}
            id="difficulty"
          >
            <option value="Easy">Easy</option>
            <option value="Medium">Medium</option>
            <option value="Hard">Hard</option>
          </select>
        </div>
        <div className="col-md-4">
          <select
            className="form-control"
            value={tour.theme} // Updated: theme instead of tourType
            onChange={handleDropdownChange}
            id="theme" // Updated: theme instead of tourType
          >
            <option value="Historic">Historic</option>
            <option value="Scenic">Scenic</option>
            <option value="Fun">Fun</option>
            <option value="Museums">Museums</option>
            <option value="Pubs">Pubs</option>
          </select>
        </div>
      </div>
      <div className="row mb-3">
        <div className="col text-center">
          <button className="btn btn-primary" onClick={handleSubmit} disabled={!tour.city || isLoading}>
            Generate Walking Tour
          </button>
        </div>
      </div>
      {isLoading ? (
        // Conditional rendering for loading animation
        <div className="row text-center">
          <div className="col">
            <p>Loading...</p>

            <div style={{ margin: '16px 0', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
              <img src={loadingAnimation} alt="Loading..." width="250" height="250" />
            </div>
          </div>
        </div>
      ) : (

        <div className="row">
          <div className="col">
            {/* Display the city photo */}
            {cityPhoto && (
              <img src={cityPhoto} alt={`${tour.city}`} style={{ width: '30%', display: 'block', margin: '0 auto' }} />
            )}
            <br />
            <textarea className="form-control" style={{ width: '20%' }} rows="10" value={tourContent} readOnly />
          </div>

          {/* Include the Map component here */}
          <Map />
        </div>
      )}

      {/* "Start Tour" button */}
      <div className="row">
        <div className="col text-center">
          <Link to="/tourlive">
            <button className="btn btn-success">Start Tour</button>
          </Link>
        </div>
      </div>

    </div>
  );
}
